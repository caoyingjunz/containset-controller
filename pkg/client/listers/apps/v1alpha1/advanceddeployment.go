/*
Copyright 2021 The Pixiu Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caoyingjunz/pixiu/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdvancedDeploymentLister helps list AdvancedDeployments.
// All objects returned here must be treated as read-only.
type AdvancedDeploymentLister interface {
	// List lists all AdvancedDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedDeployment, err error)
	// AdvancedDeployments returns an object that can list and get AdvancedDeployments.
	AdvancedDeployments(namespace string) AdvancedDeploymentNamespaceLister
	AdvancedDeploymentListerExpansion
}

// advancedDeploymentLister implements the AdvancedDeploymentLister interface.
type advancedDeploymentLister struct {
	indexer cache.Indexer
}

// NewAdvancedDeploymentLister returns a new AdvancedDeploymentLister.
func NewAdvancedDeploymentLister(indexer cache.Indexer) AdvancedDeploymentLister {
	return &advancedDeploymentLister{indexer: indexer}
}

// List lists all AdvancedDeployments in the indexer.
func (s *advancedDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedDeployment))
	})
	return ret, err
}

// AdvancedDeployments returns an object that can list and get AdvancedDeployments.
func (s *advancedDeploymentLister) AdvancedDeployments(namespace string) AdvancedDeploymentNamespaceLister {
	return advancedDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdvancedDeploymentNamespaceLister helps list and get AdvancedDeployments.
// All objects returned here must be treated as read-only.
type AdvancedDeploymentNamespaceLister interface {
	// List lists all AdvancedDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedDeployment, err error)
	// Get retrieves the AdvancedDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AdvancedDeployment, error)
	AdvancedDeploymentNamespaceListerExpansion
}

// advancedDeploymentNamespaceLister implements the AdvancedDeploymentNamespaceLister
// interface.
type advancedDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AdvancedDeployments in the indexer for a given namespace.
func (s advancedDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedDeployment))
	})
	return ret, err
}

// Get retrieves the AdvancedDeployment from the indexer for a given namespace and name.
func (s advancedDeploymentNamespaceLister) Get(name string) (*v1alpha1.AdvancedDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("advanceddeployment"), name)
	}
	return obj.(*v1alpha1.AdvancedDeployment), nil
}
