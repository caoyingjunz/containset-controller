/*
Copyright 2021 The Pixiu Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caoyingjunz/pixiu/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdvancedImageLister helps list AdvancedImages.
// All objects returned here must be treated as read-only.
type AdvancedImageLister interface {
	// List lists all AdvancedImages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedImage, err error)
	// AdvancedImages returns an object that can list and get AdvancedImages.
	AdvancedImages(namespace string) AdvancedImageNamespaceLister
	AdvancedImageListerExpansion
}

// advancedImageLister implements the AdvancedImageLister interface.
type advancedImageLister struct {
	indexer cache.Indexer
}

// NewAdvancedImageLister returns a new AdvancedImageLister.
func NewAdvancedImageLister(indexer cache.Indexer) AdvancedImageLister {
	return &advancedImageLister{indexer: indexer}
}

// List lists all AdvancedImages in the indexer.
func (s *advancedImageLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedImage))
	})
	return ret, err
}

// AdvancedImages returns an object that can list and get AdvancedImages.
func (s *advancedImageLister) AdvancedImages(namespace string) AdvancedImageNamespaceLister {
	return advancedImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdvancedImageNamespaceLister helps list and get AdvancedImages.
// All objects returned here must be treated as read-only.
type AdvancedImageNamespaceLister interface {
	// List lists all AdvancedImages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedImage, err error)
	// Get retrieves the AdvancedImage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AdvancedImage, error)
	AdvancedImageNamespaceListerExpansion
}

// advancedImageNamespaceLister implements the AdvancedImageNamespaceLister
// interface.
type advancedImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AdvancedImages in the indexer for a given namespace.
func (s advancedImageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedImage))
	})
	return ret, err
}

// Get retrieves the AdvancedImage from the indexer for a given namespace and name.
func (s advancedImageNamespaceLister) Get(name string) (*v1alpha1.AdvancedImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("advancedimage"), name)
	}
	return obj.(*v1alpha1.AdvancedImage), nil
}
